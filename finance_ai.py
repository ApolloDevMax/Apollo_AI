import json
import requests
import datetime
import os
import numpy as np
from sklearn.linear_model import LinearRegression

# API –ö–õ–Æ–ß (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º)
ALPHA_VANTAGE_API_KEY = "VXZQ84640KBVM1UR"
COINGECKO_API_URL = "https://api.coingecko.com/api/v3/simple/price"
MEMORY_FILE = "memory.json"

# ==============================
# üî• –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –î–ê–ù–ù–´–•
# ==============================


def fetch_crypto_price(symbol):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ø–æ API CoinGecko"""
    try:
        url = f"{COINGECKO_API_URL}?ids={symbol}&vs_currencies=usd"
        response = requests.get(url)
        data = response.json()
        return float(data[symbol]["usd"])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã {symbol}: {e}")
        return None


def load_memory():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞–º—è—Ç—å, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë—Ç –µ–≥–æ"""
    if not os.path.exists(MEMORY_FILE):
        return {"finance": []}

    with open(MEMORY_FILE, "r", encoding="utf-8") as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return {"finance": []}


def save_to_memory(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ –≤ –ø–∞–º—è—Ç—å"""
    memory = load_memory()
    memory["finance"].append({
        "date": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "analysis": data
    })

    with open(MEMORY_FILE, "w", encoding="utf-8") as f:
        json.dump(memory, f, indent=4, ensure_ascii=False)

    print("‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ø–∞–º—è—Ç—å!")


def predict_trend(symbol, past_data):
    """–ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—Ä–µ–Ω–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—à–ª—ã—Ö —Ü–µ–Ω (–ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è)"""
    if len(past_data) < 5:
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"

    X = np.array(range(len(past_data))).reshape(-1, 1)
    y = np.array(past_data)

    model = LinearRegression()
    model.fit(X, y)

    future_price = model.predict(np.array([[len(past_data)]]))[0]
    trend = "–†–æ—Å—Ç" if future_price > y[-1] else "–ü–∞–¥–µ–Ω–∏–µ"

    return f"{trend} (–ø—Ä–æ–≥–Ω–æ–∑: {future_price:.2f} USD)"


def analyze_trends():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—à–ª—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    memory = load_memory()
    market_trends = {}

    for asset in ["bitcoin", "ethereum", "solana"]:
        past_prices = []
        for entry in memory.get("finance", []):
            if "analysis" in entry and asset in entry["analysis"]:
                past_prices.append(entry["analysis"][asset])

        if past_prices:
            market_trends[asset] = predict_trend(asset, past_prices)

    return market_trends

# ==============================
# üöÄ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê
# ==============================


if __name__ == "__main__":
    print("üìä –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
    market_trends = analyze_trends()

    if market_trends:
        print(f"üìà –ü—Ä–æ–≥–Ω–æ–∑—ã —Ä—ã–Ω–∫–∞: {market_trends}")
        save_to_memory({"trends": market_trends})
    else:
        print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.")
