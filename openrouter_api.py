import requests
import random

# üî• OpenRouter API Key (–∑–∞–º–µ–Ω–∏, –µ—Å–ª–∏ –Ω–∞–¥–æ)
OPENROUTER_API_KEY = "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"
OPENROUTER_URL = "https://openrouter.ai/api/v1/chat/completions"

# üî• 8 –ò–ò-–º–æ–¥–µ–ª–µ–π (–ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ OpenRouter)
MODELS = {
    "gemini": "google/gemini-2.0-pro-exp-02-05:free",  # Google Gemini 2.0 Pro
    # DeepSeek R1 (–ª–æ–≥–∏–∫–∞, –∞–Ω–∞–ª–∏–∑, reasoning)
    "deepseek": "deepseek-ai/deepseek-r1",
    # Llama 3.3 70B (–æ–±—â–µ–Ω–∏–µ, —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏)
    "llama": "meta-llama/llama-3.3-70b",
    # Qwen2.5 Coder (–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è)
    "qwen_coder": "qwen/qwen2.5-coder-32b",
    # R1 Distill Qwen (–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —Ç–æ—á–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è)
    "r1_distill": "r1-distill/qwen-32b",
    # DeepSeek R1 Zero (–≥–ª—É–±–æ–∫–∏–π reasoning, –º–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ—Å—Ç—å)
    "deepseek_zero": "deepseek-ai/deepseek-r1-zero",
    # Qwen2.5 72B (—Å–ª–æ–∂–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è, –∫–æ–¥–∏–Ω–≥)
    "qwen_72b": "qwen/qwen2.5-72b-instruct",
    # Sonar Deep Research (—Ñ–∏–Ω–∞–Ω—Å—ã, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞)
    "sonar": "perplexity/sonar-deep-research"
}

# üîç –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ Wikipedia API


def wikipedia_search(query):
    """
    –ò—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Wikipedia API –∏ –≤—ã–¥–∞—ë—Ç —Å—Ç–∞—Ç—å–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏.
    """
    url = "https://en.wikipedia.org/w/api.php"

    params = {
        "action": "query",
        "format": "json",
        "list": "search",
        "srsearch": query
    }

    try:
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        data = response.json()

        if "query" in data and "search" in data["query"]:
            results = []
            for article in data["query"]["search"][:5]:  # –ë–µ—Ä—ë–º 5 —Å—Ç–∞—Ç–µ–π
                title = article["title"]
                pageid = article["pageid"]
                snippet = article["snippet"]  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –∏–∑ —Å—Ç–∞—Ç—å–∏
                # –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞
                link = f"https://en.wikipedia.org/?curid={pageid}"

                results.append(f"üìå {title}\nüîó {link}\nüìù {snippet}\n")

            return results if results else ["‚ùå Wikipedia –Ω–µ –Ω–∞—à–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."]

    except requests.exceptions.RequestException as e:
        return [f"‚ùå –û—à–∏–±–∫–∞ Wikipedia API: {str(e)}"]

# üî• –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter AI (—Å –≤—ã–±–æ—Ä–æ–º –º–æ–¥–µ–ª–∏)


def ask_openrouter(prompt, model="gemini", max_tokens=1000):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenRouter AI –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –º–æ–¥–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–¥–∞—á–∏.
    """
    if model not in MODELS:
        model = "gemini"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º Gemini 2.0

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": MODELS[model],  # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞
        "messages": [{"role": "user", "content": prompt}],
        "max_tokens": max_tokens,
        "temperature": 0.7,
        "top_p": 0.9
    }

    try:
        response = requests.post(
            OPENROUTER_URL, headers=headers, json=payload, timeout=15)
        response.raise_for_status()
        data = response.json()

        if "choices" in data and data["choices"]:
            return data["choices"][0]["message"]["content"]
        else:
            return "‚ùå –û—à–∏–±–∫–∞: –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter."

    except requests.exceptions.RequestException as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ OpenRouter: {str(e)}"


# üî• –¢–µ—Å—Ç–∏—Ä—É–µ–º API (—Å 8 –º–æ–¥–µ–ª—è–º–∏)
if __name__ == "__main__":
    test_query = "Artificial Intelligence"

    print("\nüîπ Wikipedia —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    wiki_results = wikipedia_search(test_query)
    for res in wiki_results:
        print(res)

    print("\nü§ñ –ê–Ω–∞–ª–∏–∑ AI (Gemini):")
    analysis_gemini = ask_openrouter(
        f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç–∞—Ç—å—é –∏–∑ Wikipedia –æ {test_query} –∏ —Å–¥–µ–ª–∞–π –≤—ã–≤–æ–¥—ã.", model="gemini")
    print(analysis_gemini)

    print("\nü§ñ –ê–Ω–∞–ª–∏–∑ AI (DeepSeek R1 Zero):")
    analysis_deepseek = ask_openrouter(
        f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç–∞—Ç—å—é –∏–∑ Wikipedia –æ {test_query} –∏ —Å–¥–µ–ª–∞–π –≤—ã–≤–æ–¥—ã.", model="deepseek_zero")
    print(analysis_deepseek)
