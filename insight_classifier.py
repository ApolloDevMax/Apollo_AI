import json

MEMORY_FILE = "memory.json"
CLASSIFIED_INSIGHTS_FILE = "classified_insights.json"

CATEGORIES = {
    "—Ñ–∏–Ω–∞–Ω—Å—ã": ["–∑–∞—Ä–∞–±–æ—Ç–æ–∫", "–¥–µ–Ω—å–≥–∏", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "—ç–∫–æ–Ω–æ–º–∏–∫–∞", "–¥–æ—Ö–æ–¥"],
    "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "Web3", "–±–ª–æ–∫—á–µ–π–Ω", "—Å—Ç–∞—Ä—Ç–∞–ø", "–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏"],
    "–ò–ò": ["–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–Ω–µ–π—Ä–æ—Å–µ—Ç–∏", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "AI"],
    "–±–∏–∑–Ω–µ—Å": ["–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è", "–±–∏–∑–Ω–µ—Å", "—Ä—ã–Ω–æ–∫", "–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ"]
}


def load_memory():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏."""
    try:
        with open(MEMORY_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}


def save_classified_insights(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã."""
    with open(CLASSIFIED_INSIGHTS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)


def classify_insights():
    """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∏–Ω—Å–∞–π—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."""
    memory = load_memory()
    classified_insights = {category: [] for category in CATEGORIES.keys()}

    for insight in memory.get("INSIGHTS", []):
        added = False
        for category, keywords in CATEGORIES.items():
            if any(keyword in insight.lower() for keyword in keywords):
                classified_insights[category].append(insight)
                added = True
                break
        if not added:
            classified_insights.setdefault("–¥—Ä—É–≥–æ–µ", []).append(insight)

    save_classified_insights(classified_insights)

    print("\nüìÇ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    for category, insights in classified_insights.items():
        print(f"üîπ {category.capitalize()}: {len(insights)} –∏–Ω—Å–∞–π—Ç–æ–≤")


if __name__ == "__main__":
    classify_insights()
