import requests
import json

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π ===
API_KEY = "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"
API_URL = "https://openrouter.ai/api/v1/chat/completions"

MODELS = {
    "Sonar Reasoning Pro": "perplexity/sonar-reasoning-pro",
    "DeepSeek R1 Zero": "deepseek/deepseek-r1-zero:free"
}

# === –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter ===


def ask_model(request, model_id):
    payload = {
        "model": model_id,
        "messages": [{"role": "user", "content": request}],
        "temperature": 0.5  # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤
    }
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }

    try:
        response = requests.post(
            API_URL, headers=headers, json=payload, timeout=15)
        response.raise_for_status()
        return response.json()["choices"][0]["message"]["content"]
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {model_id}: {e}")
        return None

# === –§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç—ã –¥–≤—É—Ö –ò–ò –≤ —Å–≤—è–∑–∫–µ ===


def logic_analysis(request):
    print(f"\nüîπ [–í–æ–ø—Ä–æ—Å]: {request}\n")

    responses = {}
    for name, model in MODELS.items():
        response = ask_model(request, model)
        if response:
            responses[name] = response
            # –û–±—Ä–µ–∑–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –≤—ã–≤–æ–¥
            print(f"üî∏ [{name}]: {response[:300]}...\n")
        else:
            print(f"‚ùå [{name}] –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª.")

    # === –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ ===
    if len(responses) == 2:
        final_response = f"üß† **–ê–Ω–∞–ª–∏–∑ Sonar Reasoning Pro:** {responses['Sonar Reasoning Pro']}\n\n" \
                         f"ü§ñ **–ê–Ω–∞–ª–∏–∑ DeepSeek R1 Zero:** {responses['DeepSeek R1 Zero']}\n\n" \
                         f"üî∑ **–í—ã–≤–æ–¥:** {responses['Sonar Reasoning Pro']} {responses['DeepSeek R1 Zero']}"
    else:
        final_response = "‚ö†Ô∏è –û–¥–∏–Ω –∏–∑ –ò–ò –Ω–µ —Å–º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å, –≤—ã–≤–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω."

    print(f"\nüîπ [–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç]: {final_response}\n")
    return final_response


# === –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–≤—è–∑–∫—É –¥–≤—É—Ö –ò–ò ===
if __name__ == "__main__":
    test_queries = [
        "–ö–∞–∫–æ–≤—ã –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è?",
        "–ö–∞–∫ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–∏–ª—å–Ω—É—é –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—é?",
        "–ü–æ—á–µ–º—É –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –≤–∞–∂–Ω–æ –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π?"
    ]

    for query in test_queries:
        logic_analysis(query)
