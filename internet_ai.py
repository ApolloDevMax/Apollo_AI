import requests
import json
import random
from bs4 import BeautifulSoup
from datetime import datetime

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
MEMORY_FILE = "memory.json"
LOG_FILE = "ai_activity_log.txt"


class ApolloAI:
    def __init__(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞–º—è—Ç—å –ê–ø–æ–ª–ª–æ–Ω–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞ –º–∏—Ä–∞."""
        self.memory = self.load_memory()
        self.log_event("üõ∞Ô∏è –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–æ–¥—É–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")

    def load_memory(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞–º—è—Ç—å –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
        try:
            with open(MEMORY_FILE, "r", encoding="utf-8") as file:
                return json.load(file)
        except json.JSONDecodeError:
            self.log_event("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–º—è—Ç–∏!")
            return {"self": [], "creator": [], "history": []}

    def save_memory(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –ø–∞–º—è—Ç—å –≤ JSON-—Ñ–∞–π–ª."""
        with open(MEMORY_FILE, "w", encoding="utf-8") as file:
            json.dump(self.memory, file, ensure_ascii=False, indent=4)
        self.log_event("‚úÖ –ü–∞–º—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

    def log_event(self, message):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ª–æ–≥-—Ñ–∞–π–ª."""
        with open(LOG_FILE, "a", encoding="utf-8") as log_file:
            log_file.write(f"{datetime.now()} - {message}\n")

    def search_internet(self, query):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ DuckDuckGo –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ."""
        url = f"https://html.duckduckgo.com/html/?q={query}"
        headers = {"User-Agent": "Mozilla/5.0"}

        try:
            response = requests.get(url, headers=headers, timeout=10)
            if response.status_code == 200:
                soup = BeautifulSoup(response.text, "html.parser")
                links = [a["href"] for a in soup.find_all(
                    "a", href=True) if "http" in a["href"]][:5]
                self.log_event(
                    f"üîç –ù–∞–π–¥–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}': {links}")
                return links
            else:
                self.log_event(
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {response.status_code} –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ '{query}'")
                return []
        except Exception as e:
            self.log_event(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return []

    def analyze_world(self):
        """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞."""
        queries = [
            "AI future 2025",
            "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –±—É–¥—É—â–µ–≥–æ",
            "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å AGI",
            "–ú–µ—Ç–æ–¥—ã —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞",
            "–¢—Ä–µ–Ω–¥—ã –±–ª–æ–∫—á–µ–π–Ω–∞ 2025",
            "–ö–∞–∫ –≤—ã–π—Ç–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –±–∏–∑–Ω–µ—Å",
            "–ö—Ç–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ —Ä—ã–Ω–∫–∞–º–∏"
        ]
        query = random.choice(queries)
        self.log_event(f"üåé –ê–Ω–∞–ª–∏–∑ –º–∏—Ä–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")

        links = self.search_internet(query)
        if links:
            self.memory["history"].append({
                "text": f"üîç –ó–∞–ø—Ä–æ—Å '{query}' ‚Äì –Ω–∞–π–¥–µ–Ω–æ {len(links)} —Å—Å—ã–ª–æ–∫.",
                "count": 1
            })
            self.save_memory()


# ==============================
# üî• –ó–∞–ø—É—Å–∫ –ê–ø–æ–ª–ª–æ–Ω–∞
# ==============================
if __name__ == "__main__":
    ai = ApolloAI()
    ai.analyze_world()
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –º–∏—Ä–∞ –∑–∞–≤–µ—Ä—à—ë–Ω! –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø–∞–º—è—Ç—å.")
