import json
import os
import time
from collections import deque

MEMORY_FILE = "memory.json"
TEMP_MEMORY_FILE = "temp_memory.json"


class MemoryManager:
    def __init__(self):
        self.memory = self.load_memory()
        # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å (–±—ã—Å—Ç—Ä–æ –∑–∞–±—ã–≤–∞–µ—Ç)
        self.short_term = deque(maxlen=10)
        self.medium_term = []  # –°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å (–Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π)
        # –î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å (–Ω–∞–≤—Å–µ–≥–¥–∞)
        self.long_term = self.memory.get("long_term", {})

    def load_memory(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞–º—è—Ç—å –∏–∑ —Ñ–∞–π–ª–∞."""
        if os.path.exists(MEMORY_FILE):
            with open(MEMORY_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        return {"long_term": {}}

    def save_memory(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞–º—è—Ç—å –≤ —Ñ–∞–π–ª."""
        self.memory["long_term"] = self.long_term
        with open(MEMORY_FILE, "w", encoding="utf-8") as f:
            json.dump(self.memory, f, ensure_ascii=False, indent=4)

    def add_to_memory(self, category, data, importance=1):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏."""
        entry = {"text": data, "timestamp": time.time(),
                 "importance": importance}

        # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        self.short_term.append(entry)

        # –°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å (–¥–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥–Ω–µ–π –≤–∞–∂–Ω–æ—Å—Ç–∏)
        if importance >= 3:
            self.medium_term.append(entry)

        # –î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å (–∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
        if importance >= 5:
            if category not in self.long_term:
                self.long_term[category] = []
            self.long_term[category].append(entry)

        self.save_memory()

    def analyze_memory(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞–º—è—Ç—å, –≤—ã—è–≤–ª—è–µ—Ç —Ü–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã."""
        print("\nüìä –ê–ù–ê–õ–ò–ó –ü–ê–ú–Ø–¢–ò:")
        for category, entries in self.long_term.items():
            print(f"\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category} ({len(entries)} –∑–∞–ø–∏—Å–µ–π)")
            for entry in entries[-3:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏
                print(f"üîπ {entry['text']} (–í–∞–∂–Ω–æ—Å—Ç—å: {entry['importance']})")

    def clear_temp_memory(self):
        """–û—á–∏—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å (–Ω–µ–Ω—É–∂–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)."""
        self.short_term.clear()
        self.medium_term = []
        print("üßπ –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞.")


if __name__ == "__main__":
    manager = MemoryManager()
    manager.analyze_memory()
