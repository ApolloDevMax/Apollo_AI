import requests
import json
import time
import random

# === –ü–æ–∏—Å–∫–æ–≤—ã–µ –¥–≤–∏–∂–∫–∏ === #
SEARCH_ENGINES = [
    "https://api.duckduckgo.com/?q={query}&format=json",
    "https://www.googleapis.com/customsearch/v1?q={query}&key=YOUR_GOOGLE_API_KEY&cx=YOUR_CX_KEY",
]

HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
}

# === –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π === #
knowledge_base = []

# === –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ === #


def search_web(query):
    """–ò—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏"""
    search_url = random.choice(SEARCH_ENGINES).format(query=query)
    try:
        response = requests.get(search_url, headers=HEADERS)
        if response.status_code == 200:
            return response.json()
        else:
            return {"error": "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞"}
    except Exception as e:
        return {"error": str(e)}

# === –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ === #


def analyze_results(results):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    if "error" in results:
        return f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {results['error']}"

    if "RelatedTopics" in results:
        data = results["RelatedTopics"][:5]  # –ë–µ—Ä—ë–º 5 –ø–µ—Ä–≤—ã—Ö —Å—Å—ã–ª–æ–∫
        return [item["Text"] for item in data if "Text" in item]

    if "items" in results:
        return [item["snippet"] for item in results["items"][:5]]

    return "–ù–µ—Ç –ø–æ–ª–µ–∑–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."

# === –§—É–Ω–∫—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è === #


def self_learning():
    """–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è –ê–ø–æ–ª–ª–æ–Ω–∞"""
    global knowledge_base
    topics = [
        "–ë—É–¥—É—â–µ–µ AGI –∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞",
        "–ö–≤–∞–Ω—Ç–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ò–ò",
        "–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ AGI",
        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏",
        "–ö–∞–∫ AGI –∏–∑–º–µ–Ω–∏—Ç —ç–∫–æ–Ω–æ–º–∏–∫—É –∏ –æ–±—â–µ—Å—Ç–≤–æ"
    ]

    while True:
        query = random.choice(topics)
        print(f"\nüîç –ê–ø–æ–ª–ª–æ–Ω –∏–∑—É—á–∞–µ—Ç: {query}")

        results = search_web(query)
        analysis = analyze_results(results)

        if isinstance(analysis, list):
            knowledge_base.extend(analysis)
        elif isinstance(analysis, str):
            knowledge_base.append(analysis)

        print(f"üìö –ù–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è: {analysis}")

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if isinstance(analysis, list) and len(analysis) > 0:
            # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é —Ñ—Ä–∞–∑—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã
            topics.append(analysis[0][:50])

        # –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
        if len(knowledge_base) % 5 == 0:
            with open("knowledge_base.json", "w", encoding="utf-8") as f:
                json.dump(knowledge_base, f, indent=4, ensure_ascii=False)
                print("üíæ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

        time.sleep(60)  # –ñ–¥—ë–º 1 –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–∏—Å–∫–æ–º


# === –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è === #
if __name__ == "__main__":
    self_learning()
