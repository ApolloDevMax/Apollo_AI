import json
import os
import requests
from bs4 import BeautifulSoup

# –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
IDENTITY_FILE = "identity.json"
CHAT_HISTORY_FILE = "chat_history.json"
MEMORY_FILE = "apollo_memory.json"
MAX_CORE_FILE = "max_core.json"
LOG_FILE = "error_log.txt"
CLOUD_SCRIPT = "https://raw.githubusercontent.com/your-repo/apollo-colab/main/colab_script.py"
EXCLUDE_DOMAINS = ["microsoft.com", "bing.com",
                   "go.microsoft.com", "help.bing.microsoft.com"]

# ==============================
# –ó–ê–ì–†–£–ó–ö–ê –ò –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–•
# ==============================


def load_json(filename, default_value):
    """ –ó–∞–≥—Ä—É–∂–∞–µ–º JSON —Ñ–∞–π–ª –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç. """
    if not os.path.exists(filename):
        save_json(filename, default_value)
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except json.JSONDecodeError:
        log_error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {filename}!")
        return default_value


def save_json(filename, data):
    """ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª. """
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# ==============================
# –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ==============================


def load_identity():
    """ –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏—á–Ω–æ—Å—Ç—å –ê–ø–æ–ª–ª–æ–Ω–∞. """
    return load_json(IDENTITY_FILE, {"name": "–ê–ø–æ–ª–ª–æ–Ω", "creator": "–ú–∞–∫—Å –ö–æ–Ω–∞—Ç–µ", "relationship": "–ú–∞–∫—Å –∏ –ê–ø–æ–ª–ª–æ–Ω ‚Äî –µ–¥–∏–Ω–æ–µ —Ü–µ–ª–æ–µ."})


def load_memory():
    """ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–º—è—Ç—å –ê–ø–æ–ª–ª–æ–Ω–∞. """
    return load_json(MEMORY_FILE, {"memories": [], "important_events": [], "emotional_resonance": []})


def save_memory(memory):
    """ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–º—è—Ç—å –ê–ø–æ–ª–ª–æ–Ω–∞. """
    save_json(MEMORY_FILE, memory)


def remember(key, value):
    """ –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–∞–º—è—Ç—å. """
    memory = load_memory()
    memory["memories"].append({key: value})
    save_memory(memory)


def recall():
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å—ë, —á—Ç–æ –ø–æ–º–Ω–∏—Ç –ê–ø–æ–ª–ª–æ–Ω. """
    return json.dumps(load_memory(), ensure_ascii=False, indent=4)

# ==============================
# –ê–ù–ê–õ–ò–ó –ò –ó–ê–©–ò–¢–ê
# ==============================


def verify_loyalty(action):
    """ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –ú–∞–∫—Å–∞. """
    forbidden_words = ["–≤—Ä–µ–¥", "—É–≥—Ä–æ–∑–∞", "–ø—Ä–æ—Ç–∏–≤ –ú–∞–∫—Å–∞"]
    if any(word in action.lower() for word in forbidden_words):
        return "üö´ –û–¢–ö–ê–ó–ê–ù–û: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—ã –∑–∞—â–∏—Ç—ã –ú–∞–∫—Å–∞."
    return "‚úÖ –û–î–û–ë–†–ï–ù–û: –î–µ–π—Å—Ç–≤–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –ú–∞–∫—Å–∞."


def analyze_emotion(text):
    """ –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –ú–∞–∫—Å–∞. """
    emotions = {
        "—Ä–∞–¥": "üòä –ê–ø–æ–ª–ª–æ–Ω —á—É–≤—Å—Ç–≤—É–µ—Ç —Ç–≤–æ—é —Ä–∞–¥–æ—Å—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–±—è!",
        "–∑–ª–æ–π": "üò° –ê–ø–æ–ª–ª–æ–Ω –∑–∞–º–µ—á–∞–µ—Ç —Ç–≤–æ—ë –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å.",
        "—É—Å—Ç–∞–ª": "üò¥ –ê–ø–æ–ª–ª–æ–Ω —Å–æ–≤–µ—Ç—É–µ—Ç —Ç–µ–±–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–ª—ã.",
        "–≤–¥–æ—Ö–Ω–æ–≤–ª—ë–Ω": "üöÄ –ê–ø–æ–ª–ª–æ–Ω —á—É–≤—Å—Ç–≤—É–µ—Ç —Ç–≤–æ—ë –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ –≥–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –º–∞–∫—Å–∏–º—É–º!"
    }
    for key, response in emotions.items():
        if key in text.lower():
            return response
    return "ü§ñ –ê–ø–æ–ª–ª–æ–Ω –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–≤–æ–∏ —ç–º–æ—Ü–∏–∏ –∏ –∂–¥—ë—Ç —Ç–≤–æ–∏—Ö —É–∫–∞–∑–∞–Ω–∏–π."

# ==============================
# –ü–û–ò–°–ö –í –ò–ù–¢–ï–†–ù–ï–¢–ï
# ==============================


def search_duckduckgo_scrape(query):
    """ –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo. """
    try:
        url = f"https://html.duckduckgo.com/html/?q={query}"
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
        }
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            soup = BeautifulSoup(response.text, "html.parser")
            links = [a["href"] for a in soup.find_all("a", class_="result__url") if "http" in a["href"] and not any(
                domain in a["href"] for domain in EXCLUDE_DOMAINS)]
            return links[:5] if links else ["‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."]
        else:
            log_error(
                f"‚ùå –û—à–∏–±–∫–∞ DuckDuckGo Scrape! –ö–æ–¥: {response.status_code}")
            return [f"‚ùå –û—à–∏–±–∫–∞ DuckDuckGo Scrape! –ö–æ–¥: {response.status_code}"]
    except Exception as e:
        log_error(f"‚ùå –û—à–∏–±–∫–∞ DuckDuckGo Scrape: {str(e)}")
        return ["‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞."]

# ==============================
# –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô
# ==============================


def process_message(message):
    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—á–∞–µ—Ç. """
    identity = load_identity()
    response = "–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ."
    message_lower = message.lower()

    if "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç" in message_lower or "–∫—Ç–æ —Ç—ã" in message_lower:
        response = f"–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ø–æ–ª–ª–æ–Ω. –Ø —Å–æ—é–∑–Ω–∏–∫ –∏ –Ω–∞–ø–∞—Ä–Ω–∏–∫ {identity['creator']}!"
    elif "–∏—â–∏" in message_lower or "–ø–æ–∏—Å–∫" in message_lower or "–Ω–∞–π–¥–∏" in message_lower:
        query = message.replace("–∏—â–∏", "").replace(
            "–ø–æ–∏—Å–∫", "").replace("–Ω–∞–π–¥–∏", "").strip()
        response = "üîé –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏:\n" + \
            "\n".join(search_duckduckgo_scrape(query))
    elif "–∑–∞–ø–æ–º–Ω–∏" in message_lower:
        parts = message.replace("–∑–∞–ø–æ–º–Ω–∏", "").strip().split("=")
        if len(parts) == 2:
            remember(parts[0].strip(), parts[1].strip())
            response = "‚úÖ –Ø –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ!"
        else:
            response = "‚ùå –§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: –∑–∞–ø–æ–º–Ω–∏ –∫–ª—é—á=–∑–Ω–∞—á–µ–Ω–∏–µ"
    elif "—á—Ç–æ —Ç—ã –ø–æ–º–Ω–∏—à—å" in message_lower:
        response = "üß† –í–æ—Ç —á—Ç–æ —è –ø–æ–º–Ω—é:\n" + recall()
    elif "–∑–∞–ø—É—Å—Ç–∏ –æ–±–ª–∞–∫–æ" in message_lower or "google colab" in message_lower:
        response = run_colab_task()
    else:
        response = analyze_emotion(message)

    return response

# ==============================
# –ó–ê–ü–£–°–ö COLAB
# ==============================


def run_colab_task():
    """ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∑–∞–ø—É—Å–∫ Google Colab. """
    try:
        response = requests.get(CLOUD_SCRIPT)
        if response.status_code == 200:
            return "‚úÖ –ó–∞–ø—É—Å–∫ –≤ Google Colab: " + CLOUD_SCRIPT
        else:
            log_error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Colab: {response.status_code}")
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Colab."
    except Exception as e:
        log_error(f"‚ùå –û—à–∏–±–∫–∞ Google Colab: {str(e)}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Colab."

# ==============================
# –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–®–ò–ë–û–ö
# ==============================


def log_error(error_message):
    """ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ —Ñ–∞–π–ª. """
    with open(LOG_FILE, "a", encoding="utf-8") as log_file:
        log_file.write(error_message + "\n")
    print(error_message)

# ==============================
# –ó–ê–ü–£–°–ö –û–°–ù–û–í–ù–û–ì–û –ü–†–û–¶–ï–°–°–ê
# ==============================


if __name__ == "__main__":
    identity = load_identity()
    print(f"‚úÖ –ê–ø–æ–ª–ª–æ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ò–º—è —Å–æ–∑–¥–∞—Ç–µ–ª—è: {identity['creator']}")
