import json
import os
import requests
import subprocess
from bs4 import BeautifulSoup
from memory import Memory
from storage import NewsStorage  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–æ–≤–æ—Å—Ç–µ–π

# ==============================
# üî• –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
# ==============================

IDENTITY_FILE = "identity.json"
MEMORY_FILE = "apollo_memory.json"
LOG_FILE = "error_log.txt"
NEWS_API_KEY = "d8118941edfb433290e76fb6bc96df31"  # üîë –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π API-–∫–ª—é—á!
EXCLUDE_DOMAINS = ["microsoft.com", "bing.com", "go.microsoft.com"]

memory = Memory()
news_storage = NewsStorage()

# ==============================
# üî• –í–°–¢–†–û–ï–ù–ù–ê–Ø –°–ê–ú–û–û–ë–£–ß–ê–ï–ú–û–°–¢–¨
# ==============================

SELF_IMPROVEMENT_SCRIPT = "self_improvement_loop.py"
PROGRESS_VISUALIZER_SCRIPT = "progress_visualizer.py"


def run_self_improvement():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è –ê–ø–æ–ª–ª–æ–Ω–∞."""
    print("üöÄ –ê–ø–æ–ª–ª–æ–Ω –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è...")
    subprocess.run(["python", SELF_IMPROVEMENT_SCRIPT])


def show_progress():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ê–ø–æ–ª–ª–æ–Ω–∞."""
    print("üìä –ü–æ–∫–∞–∑—ã–≤–∞—é –ø—Ä–æ–≥—Ä–µ—Å—Å...")
    subprocess.run(["python", PROGRESS_VISUALIZER_SCRIPT])

# ==============================
# üî• –ê–ü–û–õ–õ–û–ù: –õ–ò–ß–ù–û–°–¢–¨ –ò –ü–ê–ú–Ø–¢–¨
# ==============================


def load_json(filename, default_value):
    """ –ó–∞–≥—Ä—É–∂–∞–µ–º JSON –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π. """
    if not os.path.exists(filename):
        save_json(filename, default_value)
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except json.JSONDecodeError:
        log_error(f"‚ö† –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {filename}!")
        return default_value


def save_json(filename, data):
    """ –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON. """
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)


def load_identity():
    """ –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏—á–Ω–æ—Å—Ç—å. """
    return load_json(IDENTITY_FILE, {"name": "–ê–ø–æ–ª–ª–æ–Ω", "creator": "–ú–∞–∫—Å –ö–æ–Ω–∞—Ç–µ"})


def remember(key, value):
    """ –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–∞–º—è—Ç—å. """
    memory.add_to_memory(key, value, "long_term")


def recall(key):
    """ –î–æ—Å—Ç–∞—ë–º –∏–∑ –ø–∞–º—è—Ç–∏. """
    return memory.get_from_memory(key) or "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ."

# ==============================
# üî• –ê–ù–ê–õ–ò–ó –¢–ï–ö–°–¢–ê
# ==============================


class TextAnalyzer:
    def extract_main_idea(self, text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–¥–µ—é –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
        sentences = text.split(". ")
        if len(sentences) > 2:
            return f"üìå –ì–ª–∞–≤–Ω–æ–µ: {sentences[0]}... {sentences[1]}"
        return f"üìå –ö–ª—é—á–µ–≤–∞—è –∏–¥–µ—è: {text}"

    def summarize_article(self, url):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—å—é –ø–æ URL."""
        try:
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                soup = BeautifulSoup(response.text, "html.parser")
                paragraphs = soup.find_all("p")
                full_text = " ".join([p.get_text() for p in paragraphs])
                return self.extract_main_idea(full_text)
            return "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—å—é."
        except Exception as e:
            return f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}"


text_analyzer = TextAnalyzer()

# ==============================
# üî• –ù–û–í–û–°–¢–ò –ò–ó API
# ==============================


def fetch_news():
    """ –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ API. """
    url = f"https://newsapi.org/v2/top-headlines?country=us&apiKey={NEWS_API_KEY}"
    try:
        response = requests.get(url)
        data = response.json()
        if data["status"] == "ok":
            news_list = []
            for article in data["articles"]:
                title = article["title"]
                source = article["source"]["name"]
                url = article["url"]
                if news_storage.add_news(title, source, url):
                    news_list.append(f"üì∞ {title} - {source}\nüîó {url}")
            return "\n".join(news_list) if news_list else "‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π."
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ API: {data['message']}"
    except Exception as e:
        log_error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π."

# ==============================
# üî• –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô
# ==============================


def process_message(message):
    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. """
    message_lower = message.lower()
    if "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç" in message_lower or "–∫—Ç–æ —Ç—ã" in message_lower:
        identity = load_identity()
        return f"–ú–µ–Ω—è –∑–æ–≤—É—Ç {identity['name']}. –Ø —Å–æ—é–∑–Ω–∏–∫ {identity['creator']}!"
    elif "–Ω–æ–≤–æ—Å—Ç–∏" in message_lower:
        return fetch_news()
    elif "–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–µ–±—è" in message_lower:
        run_self_improvement()
        return "üõ† –ó–∞–ø—É—Å—Ç–∏–ª –ø—Ä–æ—Ü–µ—Å—Å —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è."
    elif "–ø–æ–∫–∞–∂–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å" in message_lower:
        show_progress()
        return "üìä –û—Ç–æ–±—Ä–∞–∂–∞—é –ø—Ä–æ–≥—Ä–µ—Å—Å –ê–ø–æ–ª–ª–æ–Ω–∞."
    elif "–ø–æ–∏—Å–∫" in message_lower:
        query = message.replace("–ø–æ–∏—Å–∫", "").strip()
        return "üîé –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏:\n" + "\n".join(search_duckduckgo(query))
    elif "–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π" in message_lower:
        url = message.replace("–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π", "").strip()
        return text_analyzer.summarize_article(url)
    else:
        return "ü§ñ –Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å."

# ==============================
# üî• –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –ß–ê–¢ –° –ê–ü–û–õ–õ–û–ù–û–ú
# ==============================


if __name__ == "__main__":
    identity = load_identity()
    print(f"‚úÖ –ê–ø–æ–ª–ª–æ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ò–º—è —Å–æ–∑–¥–∞—Ç–µ–ª—è: {identity['creator']}\n")

    while True:
        user_input = input("üü¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ").strip().lower()

        if user_input in ["–≤—ã—Ö–æ–¥", "exit", "quit"]:
            print("üëã –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
            break

        response = process_message(user_input)
        print(response)
