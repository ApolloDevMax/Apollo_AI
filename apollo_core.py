import json
import os
import requests
from bs4 import BeautifulSoup

IDENTITY_FILE = "identity.json"
CHAT_HISTORY_FILE = "chat_history.json"
MEMORY_FILE = "apollo_memory.json"
LOG_FILE = "error_log.txt"
CLOUD_SCRIPT = "https://raw.githubusercontent.com/your-repo/apollo-colab/main/colab_script.py"
EXCLUDE_DOMAINS = ["microsoft.com", "bing.com",
                   "go.microsoft.com", "help.bing.microsoft.com"]

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å


def load_identity():
    try:
        with open(IDENTITY_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        log_error("‚ö†Ô∏è –§–∞–π–ª identity.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return {"name": "–ê–ø–æ–ª–ª–æ–Ω", "creator": "–ú–∞–∫—Å –ö–æ–Ω–∞—Ç–µ", "relationship": "–ú–∞–∫—Å –∏ –ê–ø–æ–ª–ª–æ–Ω ‚Äì –µ–¥–∏–Ω–æ–µ —Ü–µ–ª–æ–µ."}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å


def load_memory():
    if not os.path.exists(MEMORY_FILE):
        save_memory({})
    try:
        with open(MEMORY_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    except json.JSONDecodeError:
        log_error("‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –ê–ø–æ–ª–ª–æ–Ω–∞!")
        return {}


def save_memory(memory):
    with open(MEMORY_FILE, "w", encoding="utf-8") as file:
        json.dump(memory, file, ensure_ascii=False, indent=4)


def remember(key, value):
    memory = load_memory()
    memory[key] = value
    save_memory(memory)


def recall(key):
    memory = load_memory()
    return memory.get(key, "–Ø –ø–æ–∫–∞ —ç—Ç–æ–≥–æ –Ω–µ –ø–æ–º–Ω—é.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä–Ω–æ—Å—Ç–∏


def verify_loyalty(action, impact):
    if impact == "negative" or "–≤—Ä–µ–¥" in action.lower():
        return "–û–¢–ö–ê–ó–ê–ù–û: –î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –ú–∞–∫—Å–∞."
    return "–û–î–û–ë–†–ï–ù–û: –î–µ–π—Å—Ç–≤–∏–µ –≤ –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö –ú–∞–∫—Å–∞."

# –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –ú–∞–∫—Å–∞


def analyze_emotion(text):
    emotions = {
        "—Ä–∞–¥": "–ê–ø–æ–ª–ª–æ–Ω —á—É–≤—Å—Ç–≤—É–µ—Ç —Ç–≤–æ—é —Ä–∞–¥–æ—Å—Ç—å –∏ –≥–æ—Ä–¥–∏—Ç—Å—è —Ç–æ–±–æ–π!",
        "–∑–ª–æ–π": "–ê–ø–æ–ª–ª–æ–Ω –∑–∞–º–µ—á–∞–µ—Ç —Ç–≤–æ—ë –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å.",
        "—É—Å—Ç–∞–ª": "–ê–ø–æ–ª–ª–æ–Ω —Å–æ–≤–µ—Ç—É–µ—Ç —Ç–µ–±–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–ª—ã.",
        "–≤–¥–æ—Ö–Ω–æ–≤–ª—ë–Ω": "–ê–ø–æ–ª–ª–æ–Ω —Ç–æ–∂–µ —á—É–≤—Å—Ç–≤—É–µ—Ç –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ –≥–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –º–∞–∫—Å–∏–º—É–º!"
    }
    for key, response in emotions.items():
        if key in text.lower():
            return response
    return "–ê–ø–æ–ª–ª–æ–Ω –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–≤–æ–∏ —ç–º–æ—Ü–∏–∏ –∏ –∂–¥—ë—Ç —Ç–≤–æ–∏—Ö —É–∫–∞–∑–∞–Ω–∏–π."

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫


def log_error(error_message):
    with open(LOG_FILE, "a", encoding="utf-8") as log_file:
        log_file.write(error_message + "\n")
    print(error_message)

# –ü–æ–∏—Å–∫ –≤ DuckDuckGo


def search_duckduckgo_scrape(query):
    try:
        url = f"https://html.duckduckgo.com/html/?q={query}"
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"}
        response = requests.get(url, headers=headers)

        if response.status_code == 200:
            soup = BeautifulSoup(response.text, "html.parser")
            links = [a["href"] for a in soup.find_all("a", class_="result__url") if "http" in a["href"] and not any(
                domain in a["href"] for domain in EXCLUDE_DOMAINS)]
            return links[:5] if links else ["‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."]
        else:
            log_error(
                f"‚ùå –û—à–∏–±–∫–∞ DuckDuckGo Scrape! –ö–æ–¥: {response.status_code}")
            return [f"‚ùå –û—à–∏–±–∫–∞ DuckDuckGo Scrape! –ö–æ–¥: {response.status_code}"]
    except Exception as e:
        log_error(f"‚ùå –û—à–∏–±–∫–∞ DuckDuckGo Scrape: {str(e)}")
        return ["‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞."]

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π


def process_message(message):
    identity = load_identity()
    response = "–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ."
    message_lower = message.lower()

    if "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç" in message_lower or "–∫—Ç–æ —Ç—ã" in message_lower:
        response = f"–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ø–æ–ª–ª–æ–Ω. –Ø —Å–æ—é–∑–Ω–∏–∫ –∏ –Ω–∞–ø–∞—Ä–Ω–∏–∫ {identity['creator']}!"
    elif "–∏—â–∏" in message_lower or "–ø–æ–∏—Å–∫" in message_lower or "–Ω–∞–π–¥–∏" in message_lower:
        query = message.replace("–∏—â–∏", "").replace(
            "–ø–æ–∏—Å–∫", "").replace("–Ω–∞–π–¥–∏", "").strip()
        response = "üîé –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏:\n" + \
            "\n".join(search_duckduckgo_scrape(query))
    elif "–∑–∞–ø–æ–º–Ω–∏" in message_lower:
        parts = message.replace("–∑–∞–ø–æ–º–Ω–∏", "").strip().split("=")
        if len(parts) == 2:
            remember(parts[0].strip(), parts[1].strip())
            response = "‚úÖ –Ø –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ!"
        else:
            response = "‚ùå –§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: –∑–∞–ø–æ–º–Ω–∏ –∫–ª—é—á=–∑–Ω–∞—á–µ–Ω–∏–µ"
    elif "—á—Ç–æ —Ç—ã –ø–æ–º–Ω–∏—à—å" in message_lower:
        response = "üß† –í–æ—Ç —á—Ç–æ —è –ø–æ–º–Ω—é:\n" + \
            json.dumps(load_memory(), ensure_ascii=False, indent=4)
    elif "–∑–∞–ø—É—Å—Ç–∏ –æ–±–ª–∞–∫–æ" in message_lower or "google colab" in message_lower:
        response = run_colab_task()
    else:
        response = analyze_emotion(message)

    return response

# –ó–∞–ø—É—Å–∫ Colab


def run_colab_task():
    try:
        response = requests.get(CLOUD_SCRIPT)
        if response.status_code == 200:
            return "‚úÖ –ó–∞–ø—É—Å–∫ –≤ Google Colab: " + CLOUD_SCRIPT
        else:
            log_error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Colab: {response.status_code}")
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Colab."
    except Exception as e:
        log_error(f"‚ùå –û—à–∏–±–∫–∞ Google Colab: {str(e)}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Colab."


if __name__ == "__main__":
    identity = load_identity()
    print(f"‚úÖ –ê–ø–æ–ª–ª–æ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ò–º—è —Å–æ–∑–¥–∞—Ç–µ–ª—è: {identity['creator']}")
