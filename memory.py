import json
import time
import os
import spacy
from logic import LogicEngine  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏–∑–∞

# –ó–∞–≥—Ä—É–∂–∞–µ–º spaCy –º–æ–¥–µ–ª—å –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
nlp = spacy.load("ru_core_news_sm")


class Memory:
    def __init__(self, memory_file="apollo_memory.json"):
        self.memory_file = memory_file
        self.default_structure = {
            "long_term": {},
            "mid_term": {},
            "short_term": {}
        }
        self.data = self.load_memory()
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        self.logic = LogicEngine(self)

    def load_memory(self):
        if os.path.exists(self.memory_file):
            try:
                with open(self.memory_file, "r", encoding="utf-8") as file:
                    data = json.load(file)
                    for key in self.default_structure:
                        if key not in data:
                            data[key] = {}
                    return data
            except json.JSONDecodeError:
                print("‚ö† –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ –ø–∞–º—è—Ç–∏, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π...")
        return self.default_structure

    def save_memory(self):
        with open(self.memory_file, "w", encoding="utf-8") as file:
            json.dump(self.data, file, ensure_ascii=False, indent=4)

    def add_to_memory(self, key, value, memory_type="short_term"):
        if memory_type not in self.data:
            print(f"‚ö† –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–∞–º—è—Ç–∏ '{memory_type}'")
            return

        summary = self.summarize_text(value)
        timestamp = time.time()
        self.data[memory_type][key] = {
            "value": summary, "timestamp": timestamp}
        self.save_memory()

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        print("\nü§ñ –ê–ø–æ–ª–ª–æ–Ω –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
        self.logic.analyze_knowledge()

    def get_from_memory(self, key):
        for memory_type in ["long_term", "mid_term", "short_term"]:
            if key in self.data[memory_type]:
                return self.data[memory_type][key]["value"]
        return None

    def clean_memory(self):
        current_time = time.time()
        short_term_limit = 24 * 60 * 60
        mid_term_limit = 7 * 24 * 60 * 60

        for key in list(self.data["short_term"].keys()):
            if current_time - self.data["short_term"][key]["timestamp"] > short_term_limit:
                del self.data["short_term"][key]

        for key in list(self.data["mid_term"].keys()):
            if current_time - self.data["mid_term"][key]["timestamp"] > mid_term_limit:
                del self.data["mid_term"][key]

        self.save_memory()

    def summarize_text(self, text):
        doc = nlp(text)
        sentences = [sent.text for sent in doc.sents]
        return " ".join(sentences[:3])  # –ë–µ—Ä—ë–º 3 –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è


# üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º
if __name__ == "__main__":
    memory = Memory()
    text = """
    –ê–ø–æ–ª–ª–æ–Ω ‚Äî —ç—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ —Å–æ–∑–¥–∞–Ω–∏—é AGI. –ï–≥–æ —Ü–µ–ª—å ‚Äî —Å—Ç–∞—Ç—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π, —Å–ø–æ—Å–æ–±–Ω–æ–π –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å 
    –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥—ã –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –Ω–æ–≤—ã–º —É—Å–ª–æ–≤–∏—è–º. –°–µ–π—á–∞—Å –º—ã –æ–±—É—á–∞–µ–º –µ–≥–æ –ø–æ–Ω–∏–º–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç, 
    –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã –∏ –∏–∑–≤–ª–µ–∫–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –∏–¥–µ–∏. –í –±—É–¥—É—â–µ–º –æ–Ω –±—É–¥–µ—Ç —Å–ø–æ—Å–æ–±–µ–Ω –∞–≤—Ç–æ–Ω–æ–º–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ–±–ª–∞–∫–µ 
    –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏.
    """
    memory.add_to_memory("ai_evolution", text, "long_term")
    print("–î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å:", memory.get_from_memory("ai_evolution"))

    print("–û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å...")
    memory.clean_memory()
