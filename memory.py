import json
import time
import os
import spacy
from collections import defaultdict
from logic import LogicEngine  # –ò–º–ø–æ—Ä—Ç –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –¥–≤–∏–∂–∫–∞

# –ó–∞–≥—Ä—É–∂–∞–µ–º spaCy –º–æ–¥–µ–ª—å –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
nlp = spacy.load("ru_core_news_sm")


class Memory:
    def __init__(self, memory_file="apollo_memory.json"):
        self.memory_file = memory_file
        self.default_structure = {
            "long_term": {},
            "mid_term": {},
            "short_term": {}
        }
        self.data = self.load_memory()
        self.logic = LogicEngine(self)

    def load_memory(self):
        """ –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞ –ø–∞–º—è—Ç–∏ """
        if os.path.exists(self.memory_file):
            try:
                with open(self.memory_file, "r", encoding="utf-8") as file:
                    data = json.load(file)
                    for key in self.default_structure:
                        if key not in data:
                            data[key] = {}
                    return data
            except json.JSONDecodeError:
                print("‚ö† –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ –ø–∞–º—è—Ç–∏, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π...")
        return self.default_structure

    def save_memory(self):
        """ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–∞–º—è—Ç–∏ –≤ JSON-—Ñ–∞–π–ª """
        with open(self.memory_file, "w", encoding="utf-8") as file:
            json.dump(self.data, file, ensure_ascii=False, indent=4)

    def analyze_text(self, text):
        """ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ —Å–≤—è–∑–∏ """
        if isinstance(text, dict):
            text = json.dumps(text, ensure_ascii=False)
        doc = nlp(str(text))

        terms = [token.lemma_ for token in doc if token.pos_ in ["NOUN", "VERB"]]
        relations = defaultdict(list)

        for token in doc:
            if token.dep_ in ["nsubj", "dobj", "pobj"]:
                relations[token.head.text].append(token.text)

        return terms, dict(relations)

    def add_to_memory(self, key, value, memory_type="short_term"):
        """ –î–æ–±–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç—å –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ª–æ–≥–∏–∫–∏ """
        if memory_type not in self.data:
            print(f"‚ö† –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–∞–º—è—Ç–∏ '{memory_type}'")
            return

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –æ–±–Ω–æ–≤–ª—è—Ç—å –Ω–µ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ 5 —Å–µ–∫—É–Ω–¥
        if key in self.data[memory_type]:
            last_update = self.data[memory_type][key].get("timestamp", 0)
            if time.time() - last_update < 5:
                print(f"‚è≥ {key} —É–∂–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è –Ω–µ–¥–∞–≤–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                return

        terms, relations = self.analyze_text(value)
        timestamp = time.time()
        self.data[memory_type][key] = {
            "terms": terms,
            "relations": relations,
            "timestamp": timestamp
        }
        self.save_memory()

        print("\nü§ñ –ê–ø–æ–ª–ª–æ–Ω –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
        print(f"üìå –ö–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã: {terms}")
        print(f"üîó –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏: {relations}")

        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞
        if memory_type != "short_term":
            self.logic.analyze_knowledge()

    def get_from_memory(self, key):
        """ –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏ –ø–æ –∫–ª—é—á—É """
        for memory_type in ["long_term", "mid_term", "short_term"]:
            if key in self.data[memory_type]:
                return self.data[memory_type][key]
        return None

    def clean_memory(self):
        """ –û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à—É—é –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—É—é –∏ —Å—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å """
        current_time = time.time()
        short_term_limit = 24 * 60 * 60  # 1 –¥–µ–Ω—å
        mid_term_limit = 7 * 24 * 60 * 60  # 7 –¥–Ω–µ–π

        for key in list(self.data["short_term"].keys()):
            if current_time - self.data["short_term"][key]["timestamp"] > short_term_limit:
                del self.data["short_term"][key]

        for key in list(self.data["mid_term"].keys()):
            if current_time - self.data["mid_term"][key]["timestamp"] > mid_term_limit:
                del self.data["mid_term"][key]

        self.save_memory()
        print("üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞!")


# üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º
if __name__ == "__main__":
    memory = Memory()

    test_text = "–ê–ø–æ–ª–ª–æ–Ω –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –≤—ã–¥–µ–ª–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ –∏–¥–µ–∏ –∏ —Å–≤—è–∑–∏."
    memory.add_to_memory("ai_analysis", test_text, "long_term")

    print("\nüìå –î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å:", memory.get_from_memory("ai_analysis"))
    print("\nüßπ –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å...")
    memory.clean_memory()
