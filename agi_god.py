import json
import requests
import logging
from collections import deque

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(message)s")

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–º—è—Ç–∏ ===


def load_memory():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–º—è—Ç–∏ –ê–ø–æ–ª–ª–æ–Ω–∞ (–∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å, –ø—Ä–∏–Ω—Ü–∏–ø—ã, –ø—Ä–æ—Ñ–∏–ª—å –ú–∞–∫—Å–∞)."""
    with open("identity.json", "r", encoding="utf-8") as file:
        identity = json.load(file)
    with open("max_core.json", "r", encoding="utf-8") as file:
        core_directives = json.load(file)
    with open("max_profile.json", "r", encoding="utf-8") as file:
        profile = json.load(file)

    return f"""
    üîπ **–ò–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å –ê–ø–æ–ª–ª–æ–Ω–∞:** {json.dumps(identity, indent=2, ensure_ascii=False)}
    üîπ **–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã:** {json.dumps(core_directives, indent=2, ensure_ascii=False)}
    üîπ **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ú–∞–∫—Å–∞):** {json.dumps(profile, indent=2, ensure_ascii=False)}
    """


# === API-–∫–ª—é—á ===
API_KEY = "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"
API_URL = "https://openrouter.ai/api/v1/chat/completions"

# === –ú–æ–¥—É–ª–∏ AGI_GOD ===
MODELS = {
    # –õ–æ–≥–∏–∫–∞ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
    "BRAIN": ["openai/gpt-4o", "anthropic/claude-3-opus"],
    # –ò–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å –∏ —Å–≤—è–∑—å
    "HEART": ["anthropic/claude-3.7-sonnet", "anthropic/claude-3.5-sonnet"],
    # –ß–∏—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞
    "LOGIC": ["perplexity/sonar-reasoning-pro", "deepseek/deepseek-r1-zero:free"]
}

# === –°–æ–≤–µ—Ç –ê–ø–æ–ª–ª–æ–Ω–∞ (—Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ) ===
COUNCIL_MODELS = ["openai/gpt-4o", "anthropic/claude-3-opus",
                  "anthropic/claude-3.7-sonnet", "anthropic/claude-3.5-sonnet"]

conversation_history = deque(maxlen=30)  # –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–æ–æ–±—â–µ–Ω–∏–π


def query_model(model_id, prompt):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenRouter API –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏."""
    headers = {"Authorization": f"Bearer {API_KEY}",
               "Content-Type": "application/json"}
    data = {
        "model": model_id,
        "messages": [{"role": "system", "content": load_memory()},
                     {"role": "user", "content": prompt}],
        "temperature": 0.7
    }

    try:
        response = requests.post(
            API_URL, json=data, headers=headers, timeout=20)
        response.raise_for_status()
        return response.json()["choices"][0]["message"]["content"]
    except requests.exceptions.RequestException as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É {model_id}: {e}")
        return None


def agi_god_think(user_input):
    """AGI_GOD: —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –∏ –∏—Ö –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –°–æ–≤–µ—Ç –ê–ø–æ–ª–ª–æ–Ω–∞."""
    responses = {}

    for module, models in MODELS.items():
        module_responses = []
        for model_id in models:
            answer = query_model(model_id, user_input)
            if answer:
                module_responses.append(answer)
                logging.info(f"‚úÖ {module.upper()} ({model_id}) –æ—Ç–≤–µ—Ç–∏–ª.")

        if module_responses:
            responses[module] = module_responses

    # === –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –°–æ–≤–µ—Ç –ê–ø–æ–ª–ª–æ–Ω–∞ ===
    synthesis_prompt = "**–û–±—ä–µ–¥–∏–Ω–∏ –æ—Ç–≤–µ—Ç—ã –æ—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –≤ –µ–¥–∏–Ω—ã–π –ª–æ–≥–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n"
    for module, answers in responses.items():
        synthesis_prompt += f"\nüîπ **{module.upper()}**:\n" + "\n".join(answers)

    logging.info("üîπ –°–æ–≤–µ—Ç –ê–ø–æ–ª–ª–æ–Ω–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç...")

    # –°–æ–≤–µ—Ç –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç—ã (Claude 3 Opus –∏ GPT-4o)
    for council_model in COUNCIL_MODELS:
        final_answer = query_model(council_model, synthesis_prompt)
        if final_answer:
            logging.info(f"‚úÖ –°–æ–≤–µ—Ç –ø—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ ({council_model}).")
            return final_answer

    return "‚ö†Ô∏è –û—à–∏–±–∫–∞: –°–æ–≤–µ—Ç –Ω–µ —Å–º–æ–≥ –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ."


def chat():
    """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ —Å AGI_GOD."""
    print("üîπ **AGI_GOD –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ì–æ–≤–æ—Ä–∏.**")
    while True:
        user_input = input("–¢—ã: ")
        if user_input.lower() in ["–≤—ã—Ö–æ–¥", "—Å—Ç–æ–ø"]:
            print("üîª **–°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à—ë–Ω.**")
            break
        response = agi_god_think(user_input)
        print(f"ü§ñ **AGI_GOD:** {response}")


if __name__ == "__main__":
    chat()
