import json
import os
import random
from collections import Counter

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
MEMORY_FILE = "memory.json"
NEW_QUERIES_FILE = "new_queries.json"
ERROR_LOG = "error_log.txt"


def load_memory():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞–º—è—Ç—å –ê–ø–æ–ª–ª–æ–Ω–∞."""
    if not os.path.exists(MEMORY_FILE):
        return {}
    with open(MEMORY_FILE, "r", encoding="utf-8") as f:
        return json.load(f)


def analyze_memory():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞–º—è—Ç—å, –≤—ã—è–≤–ª—è–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã."""
    memory = load_memory()
    keywords = []

    print("\nüìä –ê–ù–ê–õ–ò–ó –ü–ê–ú–Ø–¢–ò:")

    if not memory:
        print("‚ö†Ô∏è –ü–∞–º—è—Ç—å –ø—É—Å—Ç–∞! –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return []

    for category, entries in memory.items():
        print(f"\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        counter = Counter(entries)
        # –ë–µ—Ä–µ–º —Ç–æ–ø-5 –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è
        for entry, count in counter.most_common(5):
            print(f"üîπ {entry} (–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {count})")
            keywords.extend(entry.split()[:2])  # –ò–∑–≤–ª–µ–∫–∞–µ–º 2 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞

    if not keywords:
        print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return []

    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç—ã—Ö —Ç–µ–º
    new_queries = [" ".join(random.sample(keywords, 2)
                            ) + " AI" for _ in range(3)]

    print("\nüß† –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:")
    for query in new_queries:
        print(f"üîç {query}")

    return new_queries


def save_new_queries(queries):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ñ–∞–π–ª."""
    try:
        with open(NEW_QUERIES_FILE, "w", encoding="utf-8") as f:
            json.dump(queries, f, indent=4, ensure_ascii=False)
        print("\n‚úÖ –í–æ–ø—Ä–æ—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏–∑—É—á–µ–Ω–∏—è.")
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")


def log_error(error_message):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –≤ error_log.txt."""
    with open(ERROR_LOG, "a", encoding="utf-8") as log_file:
        log_file.write(error_message + "\n")
    print(f"‚ùå –û—à–∏–±–∫–∞: {error_message} (–∑–∞–ø–∏—Å–∞–Ω–æ –≤ error_log.txt)")


if __name__ == "__main__":
    try:
        new_queries = analyze_memory()
        if new_queries:
            save_new_queries(new_queries)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è self_improvement.py: {e}")
