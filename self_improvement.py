import json
import os
import random
import subprocess
from collections import Counter

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
MEMORY_FILE = "memory.json"
HYPOTHESES_FILE = "hypotheses.json"
ERROR_LOG = "error_log.txt"

# ==============================
# üî• –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ü–ê–ú–Ø–¢–¨–Æ
# ==============================


def load_memory():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞–º—è—Ç—å –ê–ø–æ–ª–ª–æ–Ω–∞."""
    if not os.path.exists(MEMORY_FILE):
        return {}
    try:
        with open(MEMORY_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except json.JSONDecodeError:
        log_error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥—ë–Ω!")
        return {}


def analyze_memory():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞–º—è—Ç—å, –≤—ã—è–≤–ª—è–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã."""
    memory = load_memory()
    keywords = []

    print("\nüìä –ê–ù–ê–õ–ò–ó –ü–ê–ú–Ø–¢–ò:")

    if not memory:
        print("‚ö†Ô∏è –ü–∞–º—è—Ç—å –ø—É—Å—Ç–∞! –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return []

    new_queries = []
    for category, entries in memory.items():
        if not isinstance(entries, list):
            print(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'! –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫, –Ω–æ –ø–æ–ª—É—á–µ–Ω {type(entries).__name__}. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
            continue

        print(f"\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        clean_entries = [str(entry) for entry in entries if isinstance(
            entry, (str, int))]  # –ò–∑–±–µ–≥–∞–µ–º —Å–ª–æ–≤–∞—Ä–µ–π
        counter = Counter(clean_entries)

        for entry, count in counter.most_common(5):
            print(f"üîπ {entry} (–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {count})")
            # –ë–µ—Ä—ë–º –¥–≤–∞ –ø–µ—Ä–≤—ã—Ö —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–ø–∏—Å–∏
            keywords.extend(entry.split()[:2])

    if not keywords:
        print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –≥–∏–ø–æ—Ç–µ–∑.")
        return []

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç—ã—Ö —Ç–µ–º
    new_queries = [
        f"–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å {random.choice(keywords)}?" for _ in range(3)]

    print("\nüß† –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –Ω–æ–≤—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã:")
    for query in new_queries:
        print(f"üí° {query}")

    return new_queries


def save_hypotheses(hypotheses):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã –≤ —Ñ–∞–π–ª."""
    try:
        with open(HYPOTHESES_FILE, "w", encoding="utf-8") as f:
            json.dump(hypotheses, f, indent=4, ensure_ascii=False)
        print("\n‚úÖ –ì–∏–ø–æ—Ç–µ–∑—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑: {e}")

# ==============================
# üî• –°–ê–ú–û–û–ë–†–ê–ó–û–í–ê–ù–ò–ï –ê–ü–û–õ–õ–û–ù–ê
# ==============================


def self_learning():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–∏–ø–æ—Ç–µ–∑—ã –∏ —É–ª—É—á—à–∞–µ—Ç –∫–æ–¥."""
    new_hypotheses = analyze_memory()
    if new_hypotheses:
        save_hypotheses(new_hypotheses)

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≥–∏–ø–æ—Ç–µ–∑
    try:
        print("\nüöÄ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–ø–æ—Ç–µ–∑...")
        subprocess.run(["python", "hypothesis_tester.py"], check=True)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ hypothesis_tester.py: {e}")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
    try:
        print("\nüîß –ó–∞–ø—É—Å–∫–∞—é —Å–∞–º–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞...")
        subprocess.run(["python", "self_correction.py"], check=True)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ self_correction.py: {e}")

# ==============================
# üî• –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–®–ò–ë–û–ö
# ==============================


def log_error(error_message):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏."""
    with open(ERROR_LOG, "a", encoding="utf-8") as log_file:
        log_file.write(error_message + "\n")
    print(f"‚ùå –û—à–∏–±–∫–∞: {error_message} (–∑–∞–ø–∏—Å–∞–Ω–æ –≤ error_log.txt)")

# ==============================
# üî• –ó–ê–ü–£–°–ö –°–ê–ú–û–†–ê–ó–í–ò–¢–ò–Ø
# ==============================


if __name__ == "__main__":
    try:
        print("\nüöÄ **–ê–ø–æ–ª–ª–æ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è** üöÄ")
        self_learning()
        print("\n‚úÖ **–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!**")
    except Exception as e:
        log_error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è: {e}")
