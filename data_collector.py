import json
import os
import requests

# API-–∫–ª—é—á SerpAPI (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –Ω–∞ serpapi.com –∏ –ø–æ–ª—É—á–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á)
SERP_API_KEY = "52c2a59b700c2e096a131d0961fdd9afcaa05a6a10fbbc443f077d31a46ce84d"

MEMORY_FILE = "memory.json"
ERROR_LOG = "error_log.txt"


def load_memory():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞–Ω–∏—è –∏–∑ –ø–∞–º—è—Ç–∏"""
    if not os.path.exists(MEMORY_FILE):
        return {}
    try:
        with open(MEMORY_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except json.JSONDecodeError:
        log_error("–§–∞–π–ª –ø–∞–º—è—Ç–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.")
        return {}


def save_memory(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è"""
    try:
        with open(MEMORY_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
        print("‚úÖ –ü–∞–º—è—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}")


def search_google(query):
    """–ò—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Google —á–µ—Ä–µ–∑ SerpAPI"""
    url = "https://serpapi.com/search"
    params = {
        "engine": "google",
        "q": query,
        "api_key": SERP_API_KEY,
        "num": 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    }
    try:
        response = requests.get(url, params=params)
        data = response.json()
        if "organic_results" in data:
            return [res["snippet"] for res in data["organic_results"]]
        else:
            return []
    except requests.RequestException as e:
        log_error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ SerpAPI: {e}")
        return []


def add_knowledge(category, content):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –≤ –ø–∞–º—è—Ç—å, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    memory = load_memory()

    if category not in memory:
        memory[category] = []

    if content not in memory[category]:
        memory[category].append(content)
        save_memory(memory)
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ '{category}': {content}")
    else:
        print(f"‚ö†Ô∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ '{category}'")


def collect_data():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Ö –≤ –ø–∞–º—è—Ç–∏"""
    topics = ["–ò–ò –æ–±—É—á–µ–Ω–∏–µ", "–ö–∞–∫ –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ?", "–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ –ò–ò"]

    for topic in topics:
        print(f"\nüîç –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ: {topic}")
        results = search_google(topic)

        if results:
            for result in results:
                add_knowledge("AI_Concepts", result)
        else:
            print("‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    print("\n‚úÖ –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à—ë–Ω.")


def log_error(error_message):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥"""
    with open(ERROR_LOG, "a", encoding="utf-8") as log_file:
        log_file.write(error_message + "\n")
    print(f"‚ùå –û—à–∏–±–∫–∞: {error_message} (–∑–∞–ø–∏—Å–∞–Ω–æ –≤ error_log.txt)")


if __name__ == "__main__":
    try:
        collect_data()
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è data_collector.py: {e}")
