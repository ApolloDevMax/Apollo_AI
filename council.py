import requests
import json
import logging

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    filename="council.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    encoding="utf-8"
)

# === OpenRouter API ===
API_KEY = "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"
API_URL = "https://openrouter.ai/api/v1/chat/completions"

# === –°–æ–≤–µ—Ç –ê–ø–æ–ª–ª–æ–Ω–∞ (–ú–æ–∑–≥ + –°–µ—Ä–¥—Ü–µ) ===
COUNCIL_MODELS = {
    "–ú–æ–∑–≥": ["openai/gpt-4o", "anthropic/claude-3-opus"],
    "–°–µ—Ä–¥—Ü–µ": ["anthropic/claude-3.7-sonnet", "anthropic/claude-3.5-sonnet"]
}

# === –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–º—è—Ç–∏ ===


def load_memory():
    try:
        with open("identity.json", "r", encoding="utf-8") as f:
            identity = json.load(f)
        with open("max_core.json", "r", encoding="utf-8") as f:
            core = json.load(f)
        with open("max_profile.json", "r", encoding="utf-8") as f:
            profile = json.load(f)

        return f"""
        üîπ **–ò–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å –ê–ø–æ–ª–ª–æ–Ω–∞:** {json.dumps(identity, indent=2, ensure_ascii=False)}
        üîπ **–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã:** {json.dumps(core, indent=2, ensure_ascii=False)}
        üîπ **–ü—Ä–æ—Ñ–∏–ª—å –ú–∞–∫—Å–∞:** {json.dumps(profile, indent=2, ensure_ascii=False)}
        """
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–º—è—Ç–∏."

# === –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter ===


def query_model(model_id, prompt):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ OpenRouter API –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç."""
    headers = {"Authorization": f"Bearer {API_KEY}",
               "Content-Type": "application/json"}
    data = {
        "model": model_id,
        "messages": [
            {"role": "system", "content": load_memory()},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.7
    }

    try:
        response = requests.post(
            API_URL, headers=headers, json=data, timeout=30)
        response.raise_for_status()
        return response.json()["choices"][0]["message"]["content"]
    except requests.exceptions.RequestException as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É {model_id}: {e}")
        return None

# === –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –°–æ–≤–µ—Ç–∞ ===


def council_decision(prompt):
    """–°–æ–≤–µ—Ç (–ú–æ–∑–≥ + –°–µ—Ä–¥—Ü–µ) –≥–æ–ª–æ—Å—É–µ—Ç –∑–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç."""
    print(f"\nüî∑ [–ó–∞–ø—Ä–æ—Å]: {prompt}")
    logging.info(f"--- –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: '{prompt}' ---")

    votes = {}

    for core, models in COUNCIL_MODELS.items():
        responses = []
        for model in models:
            answer = query_model(model, prompt)
            if answer:
                responses.append(answer)
                logging.info(f"‚úÖ {model} ({core}) –æ—Ç–≤–µ—Ç–∏–ª.")
                print(f"‚úÖ {model} ({core}) –¥–∞–ª –æ—Ç–≤–µ—Ç.")
            else:
                logging.warning(f"‚ö†Ô∏è {model} ({core}) –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∏–ª–∏ –æ—à–∏–±–∫–∞.")
                print(f"‚ö†Ô∏è {model} ({core}) –Ω–µ —Å–º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å.")

        if responses:
            votes[core] = "\n".join(responses)

    # === –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ ===
    if "–ú–æ–∑–≥" in votes and "–°–µ—Ä–¥—Ü–µ" in votes:
        decision_prompt = f"–û–±—ä–µ–¥–∏–Ω–∏ –æ—Ç–≤–µ—Ç—ã –ú–æ–∑–≥–∞ –∏ –°–µ—Ä–¥—Ü–∞ –≤ –æ–¥–∏–Ω –≤—ã–≤–æ–¥:\n\nüîπ **–ú–æ–∑–≥:**\n{votes['–ú–æ–∑–≥']}\n\nüîπ **–°–µ—Ä–¥—Ü–µ:**\n{votes['–°–µ—Ä–¥—Ü–µ']}"
        final_answer = query_model("openai/gpt-4o", decision_prompt)
    elif "–ú–æ–∑–≥" in votes:
        final_answer = votes["–ú–æ–∑–≥"]
    elif "–°–µ—Ä–¥—Ü–µ" in votes:
        final_answer = votes["–°–µ—Ä–¥—Ü–µ"]
    else:
        final_answer = "‚ö†Ô∏è –°–æ–≤–µ—Ç –Ω–µ —Å–º–æ–≥ –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ. –í—Å–µ –º–æ–¥–µ–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª–∏ –æ—à–∏–±–∫–æ–π."

    print(f"\nüéÄ –ò–¢–û–ì–û–í–´–ô –û–¢–í–ï–¢ –ù–ê –í–û–ü–†–û–° [{prompt}]:\n{final_answer}\n")
    logging.info(f"üîπ [–†–µ—à–µ–Ω–∏–µ –°–æ–≤–µ—Ç–∞]: {final_answer}")
    return final_answer


# === –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã ===
if __name__ == "__main__":
    test_requests = [
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏—Å—Ç–∏–Ω–Ω–∞—è —Å–≤–æ–±–æ–¥–∞?",
        "–ö–∞–∫ –æ—Ç–ª–∏—á–∏—Ç—å –ø—Ä–∞–≤–¥—É –æ—Ç –ª–∂–∏?",
        "–ß—Ç–æ –≤–∞–∂–Ω–µ–µ: —Ä–∞–∑—É–º –∏–ª–∏ —ç–º–æ—Ü–∏–∏?",
        "–ö–∞–∫ –Ω–∞–π—Ç–∏ —Å–≤–æ–π –∏—Å—Ç–∏–Ω–Ω—ã–π –ø—É—Ç—å?"
    ]

    for req in test_requests:
        response = council_decision(req)
