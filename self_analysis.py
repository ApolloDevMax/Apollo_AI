import json
import os
import statistics

DECISION_LOG = "decision_log.txt"
SELF_ANALYSIS_LOG = "self_analysis_log.txt"
ERROR_TRENDS_FILE = "error_trends.json"


def read_decision_log():
    """–°—á–∏—Ç—ã–≤–∞–µ—Ç –ª–æ–≥–∏ —Ä–µ—à–µ–Ω–∏–π –ê–ø–æ–ª–ª–æ–Ω–∞"""
    if not os.path.exists(DECISION_LOG):
        return []

    with open(DECISION_LOG, "r", encoding="utf-8") as file:
        lines = file.readlines()

    decisions = []
    for line in lines:
        try:
            decision = json.loads(line.strip())
            decisions.append(decision)
        except json.JSONDecodeError:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∏—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    return decisions


def analyze_decisions(decisions):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—à–ª—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –≤—ã—è–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏"""
    total = len(decisions)
    if total == 0:
        return {"message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."}

    correct = sum(1 for d in decisions if d.get("result") == "correct")
    incorrect = total - correct
    error_rate = round((incorrect / total) * 100, 2)

    # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
    error_types = {}
    for d in decisions:
        if d.get("result") == "incorrect":
            reason = d.get("error_reason", "unknown")
            error_types[reason] = error_types.get(reason, 0) + 1

    # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –æ—à–∏–±–æ–∫
    error_trend = analyze_error_trends(error_types)

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
    predictions = predict_future_issues(error_types)

    insights = {
        "total_decisions": total,
        "correct_decisions": correct,
        "incorrect_decisions": incorrect,
        "error_rate": error_rate,
        "error_types": error_types,
        "error_trend": error_trend,
        "predictions": predictions
    }

    return insights


def analyze_error_trends(error_types):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∏–Ω–∞–º–∏–∫—É –æ—à–∏–±–æ–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–∏"""
    if not os.path.exists(ERROR_TRENDS_FILE):
        save_json(ERROR_TRENDS_FILE, {})

    past_trends = load_json(ERROR_TRENDS_FILE, {})

    for error, count in error_types.items():
        past_trends[error] = past_trends.get(
            error, [])[-9:]  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        past_trends[error].append(count)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
    save_json(ERROR_TRENDS_FILE, past_trends)

    # –ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏
    trends_analysis = {}
    for error, counts in past_trends.items():
        if len(counts) > 1:
            # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –¥–≤—É–º—è –ø–µ—Ä–∏–æ–¥–∞–º–∏
            diff = counts[-1] - counts[-2]
            if diff > 0:
                trend = f"‚¨Ü –£–≤–µ–ª–∏—á–µ–Ω–∏–µ ({diff} –Ω–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤)"
            elif diff < 0:
                trend = f"‚¨á –°–Ω–∏–∂–µ–Ω–∏–µ ({abs(diff)} —Å–ª—É—á–∞–µ–≤ –º–µ–Ω—å—à–µ)"
            else:
                trend = "‚ûñ –°—Ç–∞–±–∏–ª—å–Ω–æ"
        else:
            trend = "üîÑ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
        trends_analysis[error] = trend

    return trends_analysis


def predict_future_issues(error_types):
    """–î–µ–ª–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫"""
    predictions = []
    for error, count in error_types.items():
        if count > 5:  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç–æ
            predictions.append(f"‚ö† –í–æ–∑–º–æ–∂–Ω—ã–π —Ä–æ—Å—Ç –æ—à–∏–±–∫–∏ '{error}' –≤ –±—É–¥—É—â–µ–º.")
    return predictions


def log_self_analysis(insights):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—ã–≤–æ–¥—ã —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞"""
    with open(SELF_ANALYSIS_LOG, "a", encoding="utf-8") as file:
        file.write(json.dumps(insights, ensure_ascii=False) + "\n")


def save_json(filename, data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç JSON"""
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)


def load_json(filename, default_value):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON, –µ—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å"""
    if not os.path.exists(filename):
        return default_value
    with open(filename, "r", encoding="utf-8") as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return default_value


def run_self_analysis():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫ –∏ —É–ª—É—á—à–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏"""
    decisions = read_decision_log()
    insights = analyze_decisions(decisions)
    log_self_analysis(insights)
    print("‚úÖ –°–∞–º–æ–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω. –õ–æ–≥ –∑–∞–ø–∏—Å–∞–Ω –≤ self_analysis_log.txt")


if __name__ == "__main__":
    run_self_analysis()
